import pytest
import numpy as np
from height_analysis import generate_height_data, descriptive_statistics, visualise_histogram
# Test Cases for Task 1
def test_generate_height_valid_input():
    """Test for generate_height_data function with valid input."""
    # Tests  was generated by ChatGPT for the question: "Generate tests for the function
    sample = generate_height_data()
    assert len(sample) == 1000
    assert abs (np.mean(sample) - 170) < 1 # Allow for some variation in the mean
    assert abs (np.std(sample) - 10) < 1 # Allow for some variation in the standard deviation

def test_generate_height_invalid_input():
    """Test for generate_height_data function with invalid input."""
    #Type Errors 
    with pytest.raises(TypeError):
        generate_height_data(size='a')
    with pytest.raises(TypeError):
        generate_height_data(size=1000, mean='a')
    with pytest.raises(TypeError):
        generate_height_data(size=1000, mean=170, std_dev='a')
    #Value Errors
    with pytest.raises(ValueError):
        generate_height_data(size=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=170, std_dev=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=170, std_dev=180)
    # Warning
    with pytest.warns(UserWarning):
        generate_height_data(size=299)
# Test Cases for Task 2

def test_descriptive_statistics_valid_input():
    """Test for descriptive_statistics function with valid input."""
    height_data = np.array([160, 170, 180, 190, 200])
    mean, median, std_dev = descriptive_statistics(height_data)
    assert mean == pytest.approx(180, 0.001)
    assert median == pytest.approx(180, 0.001)
    assert std_dev == pytest.approx(14.1421, 0.001)

def test_descriptive_statistics_invalid_input():
    """Test for descriptive_statistics function with invalid input."""
    with pytest.raises(TypeError):
        descriptive_statistics([160, 170, 180, 190, 200])
    with pytest.raises(ValueError):
        descriptive_statistics(np.array([]))

if __name__ == "__main__":
    #Test for Task1
    test_generate_height_valid_input()
    test_generate_height_invalid_input()
    #Test for Task2
    test_descriptive_statistics_valid_input()
    test_descriptive_statistics_invalid_input()
    print("All tests passed!")
