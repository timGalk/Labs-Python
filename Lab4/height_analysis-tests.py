import pytest
import numpy as np
from height_analysis import generate_height_data, descriptive_statistics, visualise_histogram, calculate_percentiles, identify_outliers, random_sampling, hypothesis_testing
# Test Cases for Task 1
def test_generate_height_valid_input():
    """Test for generate_height_data function with valid input."""
    # Tests  was generated by ChatGPT for the question: "Generate tests for the function
    sample = generate_height_data()
    assert len(sample) == 1000
    assert abs (np.mean(sample) - 170) < 1 # Allow for some variation in the mean
    assert abs (np.std(sample) - 10) < 1 # Allow for some variation in the standard deviation

def test_generate_height_invalid_input():
    """Test for generate_height_data function with invalid input."""
    #Type Errors 
    with pytest.raises(TypeError):
        generate_height_data(size='a')
    with pytest.raises(TypeError):
        generate_height_data(size=1000, mean='a')
    with pytest.raises(TypeError):
        generate_height_data(size=1000, mean=170, std_dev='a')
    #Value Errors
    with pytest.raises(ValueError):
        generate_height_data(size=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=170, std_dev=0)
    with pytest.raises(ValueError):
        generate_height_data(size=1000, mean=170, std_dev=180)
    # Warning
    with pytest.warns(UserWarning):
        generate_height_data(size=299)

# Test Cases for Task 2

def test_descriptive_statistics_valid_input():
    """Test for descriptive_statistics function with valid input."""
    height_data = np.array([160, 170, 180, 190, 200])
    mean, median, std_dev = descriptive_statistics(height_data)
    assert mean == pytest.approx(180, 0.001)
    assert median == pytest.approx(180, 0.001)
    assert std_dev == pytest.approx(14.1421, 0.001)

def test_descriptive_statistics_invalid_input():
    """Test for descriptive_statistics function with invalid input."""
    with pytest.raises(TypeError):
        descriptive_statistics([160, 170, 180, 190, 200])
    with pytest.raises(ValueError):
        descriptive_statistics(np.array([]))

# Test Cases for Task 3

def test_visualise_histogram_valid_input():
    """Test visualise_histogram with valid input"""
    height_data = np.array([160, 170, 180, 190, 200])
    try:
        visualise_histogram(height_data)
    except Exception as e:
        pytest.fail(f"Unexpected error: {e}")

def test_visualise_histogram_invalid_input_type():
    """Test visualise_histogram with invalid input type"""
    with pytest.raises(TypeError):
        visualise_histogram("invalid input")

def test_visualise_histogram_empty_array():
    """Test visualise_histogram with empty array"""
    with pytest.raises(ValueError):
        visualise_histogram(np.array([]))

# Test Cases for Task 4

def test_calculate_percentiles_valid_input():
    """Test for calculate_percentiles function with valid input."""
    data = np.array([150, 160, 170, 180, 190])
    p25, p50, p75 = calculate_percentiles(data)
    assert p25 == 160  # 25th percentile
    assert p50 == 170  # Median (50th percentile)
    assert p75 == 180  # 75th percentile

def test_calculate_percentiles_invalid_input():
    """Test for calculate_percentiles function with invalid input."""
    with pytest.raises(ValueError, match="Height data cannot be empty."):
        calculate_percentiles(np.array([]))
    with pytest.raises(TypeError, match="Height data must be a numpy array."):
        calculate_percentiles([150, 160, 170, 180, 190])  # Passing a list instead of numpy array

    # Task 5 
    
    # Test cases were generted by Claude AI for the question: "Generate test cases for the function identify_outliers"
def test_identify_outliers_normal_case():
    """Test identifying outliers in a typical dataset."""
    heights = np.array([160, 165, 170, 175, 180, 185, 190, 220, 130])
    outliers = identify_outliers(heights)
    np.testing.assert_array_equal(outliers, np.array([220, 130]))

def test_identify_outliers_all_within_range():
    """Test a dataset where no outliers exist."""
    heights = np.array([170, 172, 175, 173, 171, 174])
    outliers = identify_outliers(heights)
    assert len(outliers) == 0

def test_identify_outliers_input_types():
    """Test error handling for incorrect input types."""
    with pytest.raises(TypeError, match="Height data must be a numpy array."):
        identify_outliers([160, 170, 180])  # List instead of numpy array
    
    with pytest.raises(TypeError, match="Height data must be a numpy array."):
        identify_outliers(None)

def test_identify_outliers_empty_input():
    """Test error handling for empty input."""
    with pytest.raises(ValueError, match="Height data cannot be empty."):
        identify_outliers(np.array([]))

def test_identify_outliers_floating_point():
    """Test the function works with floating point height data."""
    heights = np.array([170.5, 171.2, 172.8, 180.5, 165.3, 220.7, 140.1])
    outliers = identify_outliers(heights)
    np.testing.assert_array_equal(outliers, np.array([220.7, 140.1]))

def test_identify_outliers_single_outlier():
    """Test a case with only one outlier."""
    heights = np.array([170, 172, 175, 300, 171, 173])
    outliers = identify_outliers(heights)
    np.testing.assert_array_equal(outliers, np.array([300]))
   # Task 6

def test_random_simpling_valid_input():
    """Test core functionality of random sampling."""
    array = np.array([i for i in range(1000)])
    sample = random_sampling(array)
    assert len(sample) == 50, "Sample size should be 50"
    assert len(np.unique(sample)) == 50, "Samples should be unique"
    assert all(element in array for element in sample), "All samples must be from original dataset"

def test_random_sampling_invalid_input():
    """Test error handling for invalid inputs."""
    with pytest.raises(TypeError, match="Height data must be a numpy array."):
        random_sampling([160, 170, 180])
    
    with pytest.raises(ValueError, match="Height data cannot be empty."):
        random_sampling(np.array([]))
def test_random_sampling_unique():
    array = np.array([i for i in range(1000)])
    sample = random_sampling(array)
    assert len(np.unique(sample)) == 50

# Task 7

def test_hypothesis_testing_basic():
    """Test basic functionality of hypothesis testing."""
    # Create a dataset with a mean significantly different from 165
    np.random.seed(42)
    heights = np.random.normal(170, 5, 100)

    t_stat, p_value, result_message = hypothesis_testing(heights)

    assert p_value < 0.05, "Expected to reject null hypothesis"
    assert "Reject the null hypothesis" in result_message


def test_hypothesis_testing_fail_to_reject():
    """Test scenario where null hypothesis is not rejected."""
    np.random.seed(42)
    heights = np.random.normal(165, 5, 100)

    t_stat, p_value, result_message = hypothesis_testing(heights)

    assert p_value >= 0.05, "Expected to fail to reject null hypothesis"
    assert "Fail to reject the null hypothesis" in result_message

def test_hypothesis_testing_invalid_input():
    with pytest.raises(TypeError, match="Height data must be a numpy array."):
        hypothesis_testing([160, 170, 180])

    with pytest.raises(ValueError, match="Height data cannot be empty."):
        hypothesis_testing(np.array([]))

if __name__ == "__main__":
    #Test for Task1
    test_generate_height_valid_input()
    test_generate_height_invalid_input()
    #Test for Task2
    test_descriptive_statistics_valid_input()
    test_descriptive_statistics_invalid_input()
    #Test for Task3
    # test_visualise_histogram_valid_input()
    test_visualise_histogram_invalid_input_type()
    test_visualise_histogram_empty_array()
    #Test for Task4
    test_calculate_percentiles_valid_input()
    test_calculate_percentiles_invalid_input()
    #Test for Task5
    test_identify_outliers_normal_case()
    test_identify_outliers_all_within_range()
    test_identify_outliers_input_types()
    test_identify_outliers_empty_input()
    test_identify_outliers_floating_point()
    test_identify_outliers_single_outlier()
    
    #Test for Task6
    test_random_simpling_valid_input()
    test_random_sampling_invalid_input()
    test_random_sampling_unique()

    #Test for Task7

    test_hypothesis_testing_basic()
    test_hypothesis_testing_fail_to_reject()
    test_hypothesis_testing_invalid_input()

    
    
    print("All tests passed!")
