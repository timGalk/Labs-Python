import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, ttest_1samp

def generate_height_data(size=1000, mean=170, std_dev=10) -> np.ndarray:
    """ Generates dataset of 1000 heights with a mean of 170 cm and standard deviation of 10 cm.

    Args:
        size (int, optional): Defaults to 1000.
        mean (int, optional): Defaults to 170.
        std_dev (int, optional): Defaults to 10.

    Returns:
        np.ndarray: Array of heights
    """
    # This part of code was generated by ChatGPT for the question: 
    # "Generate a dataset of 1000 heights with a mean of 170 cm and standard deviation of 10 cm."
    return np.random.normal(mean, std_dev, size) 

def descriptive_statistics(height_data:np.array):
    """Calculates the mean, median and standard deviation of the height data.

    Args:
        height_data (np.array): 

    Returns:
        _type_: _description_
    """
    mean = np.mean(height_data)
    median = np.median(height_data)
    std_dev = np.std(height_data)
    print(f"Mean: {mean:.2f}, Median: {median:.2f}, Standard Deviation: {std_dev:.2f}")
    return mean, median, std_dev

def visualise_histogram(height_data):
    """Creates a histogram of the height data.
    """
    plt.hist(height_data, bins=30, edgecolor='black', alpha=0.7)
    plt.title('Histogram of Heights')
    plt.xlabel('Height (cm)')
    plt.ylabel('Frequency')
    plt.grid(axis='y', alpha=0.75)
    plt.show()

def calculate_percentiles(height_data):
    """_summary_

    Args:
        height_data (_type_): _description_

    Returns:
        _type_: _description_
    """
    p25 = np.percentile(height_data, 25)
    p50 = np.percentile(height_data, 50)
    p75 = np.percentile(height_data, 75)
    #print(f"25th Percentile: {p25:.2f}, 50th Percentile: {p50:.2f}, 75th Percentile: {p75:.2f}")
    return p25, p50, p75

def identify_outliers(height_data):
    q1 = np.percentile(height_data, 25)
    q3 = np.percentile(height_data, 75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = height_data[(height_data < lower_bound) | (height_data > upper_bound)]
    #print(f"Identified outliers: {outliers}")
    return outliers

def random_sampling(height_data):
    sample = np.random.choice(height_data, size=50, replace=False)
    #print(f"Random Sample (50 heights): {sample}")
    return sample

def hypothesis_testing(data, null_hypothesis_mean=165):
    t_stat, p_value = ttest_1samp(data, null_hypothesis_mean)
    print(f"T-statistic: {t_stat:.2f}, P-value: {p_value:.4f}")
    if p_value < 0.05:
        print("Reject the null hypothesis: The mean height is significantly different from the hypothesized mean.")
    else:
        print("Fail to reject the null hypothesis: The mean height is not significantly different from the hypothesized mean.")
    return t_stat, p_value

def calculate_probability(data, threshold_height=180):
    mean = np.mean(data)
    std_dev = np.std(data)
    prob = 1 - norm.cdf(threshold_height, loc=mean, scale=std_dev)
    #print(f"Probability of selecting a height greater than {threshold_height} cm: {prob:.4f}")
    return prob

# Example Usage
if __name__ == "__main__":
    heights = generate_height_data()
    print(heights)
    
    # descriptive_statistics(heights)
    # visualise_histogram(heights)
    # calculate_percentiles(heights)
    # identify_outliers(heights)
    # random_sampling(heights)
    # hypothesis_testing(heights)
    # calculate_probability(heights)
